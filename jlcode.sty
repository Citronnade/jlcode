%%
%% Julia definition (c) 2018 by wg030
%%
%%
%%
% keywords, literals and built-ins from:
% https://github.com/isagalaev/highlight.js/blob/master/src/languages/julia.js
% Colors from:
% https://docs.julialang.org/en/stable/assets/highlightjs/default.css
% https://docs.julialang.org/en/stable/assets/documenter.css



% defining the jlcode package
\def\fileversion{1.1}
\def\filedate{2018/01/26}

\typeout{-- Package: `jlcode' \fileversion\space <\filedate> --}
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{jlcode}[\filedate\space\fileversion]



% loading required packages
\RequirePackage{listings}
\RequirePackage{xcolor}
\ifx\textquotesingle\undefined%
  \RequirePackage{textcomp}%
\fi
\RequirePackage{calc}
\RequirePackage{courier}





% julia language definition
\lstdefinelanguage{julia}
{%
%
%
% julia's keywords:
%
morekeywords=[1]
{%
in,isa,where,baremodule,begin,break,catch,ccall,const,continue,do,else,elseif,%
end,export,finally,for,function,global,if,import,importall,let,local,macro,%
module,quote,return,try,using,while,struct,mutable,primitive,%
% legacy, to be deprecated in the next release
type,immutable,abstract,bitstype,typealias%
},%
%
%
% julia's literals:
%
morekeywords=[2]
{%
true,false,ARGS,C_NULL,DevNull,ENDIAN_BOM,ENV,I,Inf,Inf16,Inf32,Inf64,%
InsertionSort,JULIA_HOME,LOAD_PATH,MergeSort,NaN,NaN16,NaN32,NaN64,%
PROGRAM_FILE,QuickSort,RoundDown,RoundFromZero,RoundNearest,%
RoundNearestTiesAway,RoundNearestTiesUp,RoundToZero,RoundUp,STDERR,STDIN,%
STDOUT,VERSION,catalan,e,eu,eulergamma,golden,im,nothing,pi,γ,π,φ%
},%
%
%
% julia's built-ins:
%
morekeywords=[3]
{%
ANY,AbstractArray,AbstractChannel,AbstractFloat,AbstractMatrix,AbstractRNG,%
AbstractSerializer,AbstractSet,AbstractSparseArray,AbstractSparseMatrix,%
AbstractSparseVector,AbstractString,AbstractUnitRange,AbstractVecOrMat,%
AbstractVector,Any,ArgumentError,Array,AssertionError,Associative,%
Base64DecodePipe,Base64EncodePipe,Bidiagonal,BigFloat,BigInt,BitArray,%
BitMatrix,BitVector,Bool,BoundsError,BufferStream,CachingPool,%
CapturedException,CartesianIndex,CartesianRange,Cchar,Cdouble,Cfloat,Channel,%
Char,Cint,Cintmax_t,Clong,Clonglong,ClusterManager,Cmd,CodeInfo,Colon,Complex,%
Complex128,Complex32,Complex64,CompositeException,Condition,ConjArray,%
ConjMatrix,ConjVector,Cptrdiff_t,Cshort,Csize_t,Cssize_t,Cstring,Cuchar,Cuint,%
Cuintmax_t,Culong,Culonglong,Cushort,Cwchar_t,Cwstring,DataType,Date,%
DateFormat,DateTime,DenseArray,DenseMatrix,DenseVecOrMat,DenseVector,Diagonal,%
Dict,DimensionMismatch,Dims,DirectIndexString,Display,DivideError,DomainError,%
EOFError,EachLine,Enum,Enumerate,ErrorException,Exception,ExponentialBackOff,%
Expr,Factorization,FileMonitor,Float16,Float32,Float64,Function,Future,%
GlobalRef,GotoNode,HTML,Hermitian,IO,IOBuffer,IOContext,IOStream,IPAddr,IPv4,%
IPv6,IndexCartesian,IndexLinear,IndexStyle,InexactError,InitError,Int,Int128,%
Int16,Int32,Int64,Int8,IntSet,Integer,InterruptException,InvalidStateException,%
Irrational,KeyError,LabelNode,LinSpace,LineNumberNode,LoadError,%
LowerTriangular,MIME,Matrix,MersenneTwister,Method,MethodError,MethodTable,%
Module,NTuple,NewvarNode,NullException,Nullable,Number,ObjectIdDict,%
OrdinalRange,OutOfMemoryError,OverflowError,Pair,ParseError,PartialQuickSort,%
PermutedDimsArray,Pipe,PollingFileWatcher,ProcessExitedException,Ptr,QuoteNode,%
RandomDevice,Range,RangeIndex,Rational,RawFD,ReadOnlyMemoryError,Real,%
ReentrantLock,Ref,Regex,RegexMatch,RemoteChannel,RemoteException,RevString,%
RoundingMode,RowVector,SSAValue,SegmentationFault,SerializationState,Set,%
SharedArray,SharedMatrix,SharedVector,Signed,SimpleVector,Slot,SlotNumber,%
SparseMatrixCSC,SparseVector,StackFrame,StackOverflowError,StackTrace,%
StepRange,StepRangeLen,StridedArray,StridedMatrix,StridedVecOrMat,%
StridedVector,String,SubArray,SubString,SymTridiagonal,Symbol,Symmetric,%
SystemError,TCPSocket,Task,Text,TextDisplay,Timer,Tridiagonal,Tuple,Type,%
TypeError,TypeMapEntry,TypeMapLevel,TypeName,TypeVar,TypedSlot,UDPSocket,UInt,%
UInt128,UInt16,UInt32,UInt64,UInt8,UndefRefError,UndefVarError,UnicodeError,%
UniformScaling,Union,UnionAll,UnitRange,Unsigned,UpperTriangular,Val,Vararg,%
VecElement,VecOrMat,Vector,VersionNumber,Void,WeakKeyDict,WeakRef,WorkerConfig,%
WorkerPool%
},%
%
%
sensitive=true,%
%
alsoother={$},%$
%
morecomment=[l]{\#},%
morecomment=[n]{\#=}{=\#},%
%
morestring=[b]{"},%
morestring=[m]{'},%
morestring=[s]{"""}{"""},%
morestring=[s]{r"}{"},%
morestring=[s]{b"}{"},%
morestring=[s]{v"}{"},%
morestring=[s]{raw"}{"},%
morestring=[s]{L"}{"},%
%
}[keywords,comments,strings]





% defining the colors for
\definecolor{jlbase}{HTML}{444444}            % julia's base color
\definecolor{jlkeyword}{HTML}{444444}         % julia's keywords
\definecolor{jlliteral}{HTML}{78A960}         % julia's literals
\definecolor{jlbuiltin}{HTML}{397300}         % julia's built-ins
\definecolor{jlcomment}{HTML}{888888}         % julia's comments
\definecolor{jlstring}{HTML}{880000}          % julia's strings
\definecolor{jlbackground}{HTML}{F5F5F5}      % the background of the code block
\definecolor{jlrule}{HTML}{DDDDDD}            % the rule of the code block


% defining a new opliterate key
\makeatletter
\def\lst@OpLiteratekey#1\@nil@{\let\lst@ifxopliterate\lst@if
                             \def\lst@opliterate{#1}}
\lst@Key{opliterate}{}{\@ifstar{\lst@true \lst@OpLiteratekey}
                             {\lst@false\lst@OpLiteratekey}#1\@nil@}
\lst@AddToHook{SelectCharTable}
    {\ifx\lst@opliterate\@empty\else
         \expandafter\lst@OpLiterate\lst@opliterate{}\relax\z@
     \fi}
\def\lst@OpLiterate#1#2#3{%
    \ifx\relax#2\@empty\else
        \lst@CArgX #1\relax\lst@CDef
            {}
            {\let\lst@next\@empty
             \lst@ifxopliterate
                \lst@ifmode \let\lst@next\lst@CArgEmpty \fi
             \fi
             \ifx\lst@next\@empty
                 \ifx\lst@OutputBox\@gobble\else
                   \lst@XPrintToken \let\lst@scanmode\lst@scan@m
                   \lst@token{#2}\lst@length#3\relax
                   \lst@XPrintToken
                 \fi
                 \let\lst@next\lst@CArgEmptyGobble
             \fi
             \lst@next}%
            \@empty
        \expandafter\lst@OpLiterate
    \fi}





% basic font
\def\lstbasicfont{\color{jlstring}\fontfamily{pcr}\selectfont\scriptsize}


% defining the styles for
\lstset{keywordstyle={[1]\color{jlkeyword}\bfseries}}      % julia's keywords
\lstset{keywordstyle={[2]\color{jlliteral}}}               % julia's literals
\lstset{keywordstyle={[3]\color{jlbuiltin}}}               % julia's built-ins
\lstset{commentstyle={\color{jlcomment}}}                  % julia's comments
\lstset{stringstyle={\color{jlstring}}}                    % julia's strings
\lstset{identifierstyle={\color{jlbase}}}                  % julia's identifiers
\lstset{opliterate=*
% julia's operators
{\\}{{{\color{jlbase}\lstum@backslash}}}{1} {\{}{{{\color{jlbase}\{}}}{1}
{\}}{{{\color{jlbase}\}}}}{1} {!}{{{\color{jlbase}!}}}{1}
{\%}{{{\color{jlbase}\%}}}{1} {&}{{{\color{jlbase}\&}}}{1}
{(}{{{\color{jlbase}(}}}{1} {)}{{{\color{jlbase})}}}{1}
{*}{{{\color{jlbase}*}}}{1} {+}{{{\color{jlbase}+}}}{1}
{,}{{{\color{jlbase},}}}{1} {-}{{{\color{jlbase}-}}}{1}
{.}{{{\color{jlbase}.}}}{1} {/}{{{\color{jlbase}/}}}{1}
{:}{{{\color{jlbase}:}}}{1} {;}{{{\color{jlbase};}}}{1}
{<}{{{\color{jlbase}<}}}{1} {=}{{{\color{jlbase}=}}}{1}
{>}{{{\color{jlbase}>}}}{1} {?}{{{\color{jlbase}?}}}{1}
{[}{{{\color{jlbase}[}}}{1} {]}{{{\color{jlbase}]}}}{1}
{^}{{{\color{jlbase}\^{}}}}{1} {|}{{{\color{jlbase}|}}}{1}
{~}{{{\color{jlbase}\textasciitilde{}}}}{1}
% julia's numbers
{.0}{{{\color{jlstring}.0}}}{2} {.1}{{{\color{jlstring}.1}}}{2}
{.2}{{{\color{jlstring}.2}}}{2} {.3}{{{\color{jlstring}.3}}}{2}
{.4}{{{\color{jlstring}.4}}}{2} {.5}{{{\color{jlstring}.5}}}{2}
{.6}{{{\color{jlstring}.6}}}{2} {.7}{{{\color{jlstring}.7}}}{2}
{.8}{{{\color{jlstring}.8}}}{2} {.9}{{{\color{jlstring}.9}}}{2}}


% gerneral style of the code block
\lstset{basicstyle={\lstbasicfont}}
\lstset{showstringspaces=false}
\lstset{upquote=true}
\lstset{tabsize=4}
\lstset{aboveskip={1.5\baselineskip},belowskip={1.5\baselineskip}}
\lstset{columns=fixed}


% creating the code box
\lstset{backgroundcolor=\color{jlbackground}, rulecolor=\color{jlrule}}
\lstset{frame=single, frameround=tttt}
\newlength{\bfem}
\settowidth{\bfem}{\lstbasicfont{m}}
\newlength{\xmrgn}
\setlength{\xmrgn}{(\textwidth - 80\bfem)*\real{0.5}}
\lstset{linewidth=\textwidth}
\lstset{xleftmargin=\xmrgn, xrightmargin=\xmrgn}
\lstset{framexleftmargin=0.5\bfem, framexrightmargin=0.5\bfem}


% special characters
\lstset{extendedchars=true}
% german umlauts
\lstset{literate=
{ä}{{\"a}}{1} {ö}{{\"o}}{1} {ü}{{\"u}}{1}
{Ä}{{\"A}}{1} {Ö}{{\"O}}{1} {Ü}{{\"U}}{1} {ß}{\ss}{1}}


% activating the julia style
\lstset{language=julia}
